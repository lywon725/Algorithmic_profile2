"use client";
import OpenAI from "openai";
import { useState, useEffect, useRef, Dispatch, SetStateAction } from 'react';
import {DndContext} from '@dnd-kit/core';
import { restrictToWindowEdges } from '@dnd-kit/modifiers';
import { restrictToContainer } from './Draggable/Hooks/Drag/useDragConstraints';

//Refactoring
import DraggableImage from './Draggable/DraggableImage';
import ColorPaletteBoard from './CustomEdit/ColorPaletteBoard';
import { useBgColor } from './CustomEdit/hooks/useBgColor';
import HistorySlider from './HistorySlider/HistorySlider';
import GeneratingDialog from './GeneratingDialog/GeneratingDialog';
import { useHistorySlider } from './HistorySlider/Hooks/useHistorySlider';
import { colorOptions } from './CustomEdit/hooks/colorOptions';
import SearchModeUI from '../search/SearchMode/SearchModeUI';
import { useSearchMode } from '../search/SearchMode/Hooks/useSearchMode';
import ProfileHeader from './Nickname/ProfileHeader';
import SearchFloatingButton from '../search/SearchMode/SearchFloatingButton';
import BottomActionBar from './Edit/BottomActionBar';
import { useMoodboardHandlers } from './useMoodboardHandlers';
import { useImageDelete } from "./Draggable/Hooks/Image/useImageDelete";
import { useProfileStorage } from './Nickname/Hooks/useProfileStorage';
import { useProfileImagesLoad } from './HistorySlider/Hooks/useProfileImagesLoad';
import { useInitialProfileLoad } from './Nickname/Hooks/useInitialProfileLoad';
import { getCurrentUserId } from '@/lib/database';
import { 
  ImageData,
  HistoryData,
} from '../types/profile';

// OpenAI ÌÅ¥ÎùºÏù¥Ïñ∏Ìä∏ Ï¥àÍ∏∞Ìôî
const openai = new OpenAI({
  apiKey: process.env.NEXT_PUBLIC_OPENAI_API_KEY,
  dangerouslyAllowBrowser: true
});

export default function MyProfilePage() {
  // --- ÏÉÅÌÉú ÏÑ†Ïñ∏ ---
  const [visibleImageIds, setVisibleImageIds] = useState<Set<string>>(new Set());
  const [profile, setProfile] = useState({ nickname: '', description: '' });
  const [showGeneratingDialog, setShowGeneratingDialog] = useState(false);
  const [generatingStep, setGeneratingStep] = useState(0);
  const { bgColor, handleBgColorChange } = useBgColor();
  const [images, setImages] = useState<ImageData[]>([]);
  const [positions, setPositions] = useState<Record<string, {x: number, y: number}>>({});
  const [frameStyles, setFrameStyles] = useState<Record<string, string>>({});
  const [isEditing, setIsEditing] = useState(false);
  const [histories, setHistories] = useState<HistoryData[]>([]);  
  const [currentHistoryIndex, setCurrentHistoryIndex] = useState<number>(-1);
  const placeholderImage = "../../../public/images/default_image.png"
  
  // [ÏÉàÎ°úÍ≥†Ïπ®Ïãú] ProfileImages Î°úÎìú ÌõÖ ÏÇ¨Ïö©
  const { reloadFromDB } = useProfileImagesLoad({
    setImages: setImages as Dispatch<SetStateAction<ImageData[]>>,
    setVisibleImageIds,
    setFrameStyles,
    setPositions,
    placeholderImage,
  });

  const historySlider = useHistorySlider({
    images: images as ImageData[],
    positions,
    frameStyles,
    setPositions,
    setFrameStyles,
    setVisibleImageIds,
    setImages,
    placeholderImage,
  });
  const {
    histories: sliderHistories,
    setHistories: setSliderHistories,
    currentHistoryIndex: sliderCurrentHistoryIndex,
    setCurrentHistoryIndex: setSliderCurrentHistoryIndex,
    isPlaying: sliderIsPlaying,
    setIsPlaying: setSliderIsPlaying,
    handleHistoryClick,
    handlePlayHistory,
    isTransitioning: sliderIsTransitioning,
  } = historySlider;

  const {
    handleFrameStyleChange,
    handleSave,
    handleDragEnd,
    handleImageChange,
    generateProfile,
  } = useMoodboardHandlers({
    setFrameStyles,
    positions,
    frameStyles,
    images,
    histories,
    setHistories,
    setCurrentHistoryIndex,
    setIsEditing,
    isEditing,
    setPositions,
    setImages,
    openai,
    setShowGeneratingDialog,
    setGeneratingStep,
    setProfile,
  });

  const {
    isSearchMode,
    selectedImage,
    selectedImages,
    handleImageSelect,
    toggleSearchMode,
    handleSearch,
    setSelectedImage,
    setSelectedImages,
    setIsSearchMode,
  } = useSearchMode(images as ImageData[]); 

  const handleImageDelete = useImageDelete({
    images,
    setImages: setImages as Dispatch<SetStateAction<ImageData[]>>,
    positions,
    frameStyles,
    histories,
    setHistories,
    setCurrentHistoryIndex,
    setVisibleImageIds,
  });

  // localStorage ÌîÑÎ°úÌïÑ Í¥ÄÎ¶¨ ÌõÖ ÏÇ¨Ïö©
  const { loadProfileFromStorage, isProfileExpired } = useProfileStorage();

  // üÜï DB-first ÌîÑÎ°úÌïÑ Îç∞Ïù¥ÌÑ∞ Î°úÎî©
  useEffect(() => {
    const loadLatestProfile = async () => {
      try {
        const latestProfile = await loadProfileFromStorage();
        if (latestProfile) {
          setProfile({
            nickname: latestProfile.nickname,
            description: latestProfile.description
          });
          console.log('[MyProfile] ÏµúÏã† ÌîÑÎ°úÌïÑ Î°úÎìú ÏôÑÎ£å:', latestProfile);
        }
      } catch (error) {
        console.error('[MyProfile] ÌîÑÎ°úÌïÑ Î°úÎìú Ïã§Ìå®:', error);
      }
    };

    loadLatestProfile();
  }, []); // Ïª¥Ìè¨ÎÑåÌä∏ ÎßàÏö¥Ìä∏ Ïãú 1Ìöå Ïã§Ìñâ

  // üÜï Í∞úÎ∞úÏö©: localStorage Í∞ïÏ†ú Ï†ïÎ¶¨ Ìï®Ïàò (ÏΩòÏÜîÏóêÏÑú Ìò∏Ï∂ú Í∞ÄÎä•)
  useEffect(() => {
    // @ts-ignore - Í∞úÎ∞úÏö© Ï†ÑÏó≠ Ìï®Ïàò
    window.clearAllTubeLensData = async () => {
      console.log('üßπ TubeLens Î™®Îì† Îç∞Ïù¥ÌÑ∞ Ï†ïÎ¶¨ ÏãúÏûë...');
      
      // localStorage Î™®Îì† Í¥ÄÎ†® ÌÇ§ Ï†ïÎ¶¨
      const allKeys = Object.keys(localStorage);
      const tubeLensKeys = allKeys.filter(key => 
        key.includes('profileImages') || 
        key.includes('moodboardHistories') || 
        key.includes('SliderHistory') || 
        key.includes('exploreWatchHistory') || 
        key.includes('watchHistory') || 
        key.includes('ProfileData') ||
        key.includes('moodboard-bg-color')
      );
      
      tubeLensKeys.forEach(key => {
        localStorage.removeItem(key);
        console.log(`ÏÇ≠Ï†ú: ${key}`);
      });
      
      // ÏÉÅÌÉú Ï¥àÍ∏∞Ìôî
      setImages([]);
      setVisibleImageIds(new Set());
      setFrameStyles({});
      setPositions({});
      setHistories([]);
      setCurrentHistoryIndex(-1);
      
      console.log('‚úÖ TubeLens Î™®Îì† Îç∞Ïù¥ÌÑ∞ Ï†ïÎ¶¨ ÏôÑÎ£å!');
      console.log('ÏÉàÎ°úÍ≥†Ïπ®ÌïòÏó¨ ÌôïÏù∏ÌïòÏÑ∏Ïöî.');
    };
    
    // üÜï DB ÏÉÅÌÉú ÌôïÏù∏ Ìï®Ïàò Ï∂îÍ∞Ä
    // @ts-ignore - Í∞úÎ∞úÏö© Ï†ÑÏó≠ Ìï®Ïàò
    window.checkDBStatus = async () => {
      try {
        const userId = await getCurrentUserId();
        console.log('üîç DB ÏÉÅÌÉú ÌôïÏù∏:', {
          'userId': userId,
          'DB Ïó∞Í≤∞ ÏÉÅÌÉú': 'ÌôïÏù∏ Ï§ë...'
        });

        if (!userId) {
          console.log('‚ùå Î°úÍ∑∏Ïù∏ÎêòÏßÄ ÏïäÏùå');
          return;
        }

        const { getClusterImages, getSliderHistory, getProfileData } = await import('@/lib/database');
        
        const clusterImages = await getClusterImages(userId);
        const sliderHistory = await getSliderHistory(userId);
        const profileData = await getProfileData(userId);

        // üÜï SliderHistory ÏÉÅÏÑ∏ Î∂ÑÏÑù
        const sliderAnalysis = sliderHistory?.map((item: any, index: number) => ({
          index,
          id: item.id,
          version_type: item.version_type,
          created_at: item.created_at,
          nickname: item.nickname,
          images_count: item.images?.length || 0,
          has_desired_self: item.images?.some((img: any) => img.desired_self === true),
          desired_self_count: item.images?.filter((img: any) => img.desired_self === true).length || 0
        })) || [];

        console.log('üîç DB ÏÉÅÌÉú ÌôïÏù∏ Í≤∞Í≥º:', {
          'userId': userId,
          'ClusterImages Í∞úÏàò': clusterImages?.length || 0,
          'SliderHistory Í∞úÏàò': sliderHistory?.length || 0,
          'ProfileData Ï°¥Ïû¨': !!profileData,
          'SliderHistory ÏÉÅÏÑ∏ Î∂ÑÏÑù': sliderAnalysis,
          'Î≥ÑÎ™®Ïñë Ïä¨ÎùºÏù¥Îçî Í∞úÏàò': sliderAnalysis.filter(s => s.has_desired_self).length,
          'ClusterImages ÏÉòÌîå': clusterImages?.slice(0, 2),
          'ProfileData': profileData
        });

      } catch (error) {
        console.error('‚ùå DB ÏÉÅÌÉú ÌôïÏù∏ Ïã§Ìå®:', error);
      }
    };

    // üÜï Ïä¨ÎùºÏù¥Îçî ÌûàÏä§ÌÜ†Î¶¨ ÎîîÎ≤ÑÍπÖ Ìï®Ïàò
    // @ts-ignore - Í∞úÎ∞úÏö© Ï†ÑÏó≠ Ìï®Ïàò
    window.debugSliderHistory = async (historyIndex = -1) => {
      try {
        const userId = await getCurrentUserId();
        if (!userId) {
          console.log('‚ùå Î°úÍ∑∏Ïù∏ÎêòÏßÄ ÏïäÏùå');
          return;
        }

        console.log('üéöÔ∏è === Ïä¨ÎùºÏù¥Îçî ÌûàÏä§ÌÜ†Î¶¨ ÎîîÎ≤ÑÍπÖ ===');
        
        // localStorageÏóêÏÑú ÌûàÏä§ÌÜ†Î¶¨ ÌôïÏù∏
        const localStorageKey = `SliderHistory_${userId}`;
        const localHistories = JSON.parse(localStorage.getItem(localStorageKey) || '[]');
        console.log(`üì¶ localStorage ÌûàÏä§ÌÜ†Î¶¨ Í∞úÏàò: ${localHistories.length}`);
        
        // DBÏóêÏÑú ÌûàÏä§ÌÜ†Î¶¨ ÌôïÏù∏
        const { getSliderHistory } = await import('@/lib/database');
        const dbHistories = await getSliderHistory(userId);
        console.log(`üóÑÔ∏è DB ÌûàÏä§ÌÜ†Î¶¨ Í∞úÏàò: ${dbHistories?.length || 0}`);
        
        if (historyIndex === -1) {
          // Î™®Îì† ÌûàÏä§ÌÜ†Î¶¨ ÏöîÏïΩ
          console.log('=== Î™®Îì† ÌûàÏä§ÌÜ†Î¶¨ ÏöîÏïΩ ===');
          localHistories.forEach((history: any, index: number) => {
            console.log(`[${index}] ÌÉÄÏûÑÏä§ÌÉ¨ÌîÑ: ${new Date(history.timestamp).toLocaleString()}`);
            console.log(`     Ïù¥ÎØ∏ÏßÄ Í∞úÏàò: ${history.images?.length || 0}`);
            console.log(`     Î≤ÑÏ†Ñ ÌÉÄÏûÖ: ${history.version_type || 'unknown'}`);
            console.log(`     Î≥ÑÎ™®Ïñë Ïù¥ÎØ∏ÏßÄ: ${history.images?.filter((img: any) => img.desired_self).length || 0}Í∞ú`);
          });
        } else if (historyIndex >= 0 && historyIndex < localHistories.length) {
          // ÌäπÏ†ï ÌûàÏä§ÌÜ†Î¶¨ ÏÉÅÏÑ∏
          const target = localHistories[historyIndex];
          console.log(`=== ÌûàÏä§ÌÜ†Î¶¨ [${historyIndex}] ÏÉÅÏÑ∏ ===`);
          console.log('ÌÉÄÏûÑÏä§ÌÉ¨ÌîÑ:', new Date(target.timestamp).toLocaleString());
          console.log('Î≤ÑÏ†Ñ ÌÉÄÏûÖ:', target.version_type);
          console.log('Ïù¥ÎØ∏ÏßÄ Í∞úÏàò:', target.images?.length || 0);
          console.log('Ïù¥ÎØ∏ÏßÄ Îç∞Ïù¥ÌÑ∞:', target.images);
          console.log('Ìè¨ÏßÄÏÖò Í∞úÏàò:', Object.keys(target.positions || {}).length);
          console.log('ÌîÑÎ†àÏûÑÏä§ÌÉÄÏùº Í∞úÏàò:', Object.keys(target.frameStyles || {}).length);
          
          // Ïù¥ÎØ∏ÏßÄ ÏÉÅÏÑ∏ Î∂ÑÏÑù
          if (target.images && target.images.length > 0) {
            target.images.forEach((img: any, idx: number) => {
              console.log(`  Ïù¥ÎØ∏ÏßÄ[${idx}]:`, {
                id: img.id,
                src: img.src?.substring(0, 50) + '...',
                desired_self: img.desired_self,
                position: img.position,
                frameStyle: img.frameStyle
              });
            });
          }
        }
        
        // ÌòÑÏû¨ ÏÉÅÌÉúÏôÄ ÎπÑÍµê
        console.log('=== ÌòÑÏû¨ ÏÉÅÌÉú ===');
        console.log('ÌòÑÏû¨ Ïù¥ÎØ∏ÏßÄ Í∞úÏàò:', images.length);
        console.log('ÌòÑÏû¨ visible Ïù¥ÎØ∏ÏßÄ Í∞úÏàò:', visibleImageIds.size);
        console.log('ÌòÑÏû¨ positions Í∞úÏàò:', Object.keys(positions).length);
        console.log('ÌòÑÏû¨ frameStyles Í∞úÏàò:', Object.keys(frameStyles).length);
        
      } catch (error) {
        console.error('‚ùå Ïä¨ÎùºÏù¥Îçî ÌûàÏä§ÌÜ†Î¶¨ ÎîîÎ≤ÑÍπÖ Ïã§Ìå®:', error);
      }
    };
    
    // üÜï MyPage ÏãúÏ≤≠Í∏∞Î°ù ÎîîÎ≤ÑÍπÖ Ìï®Ïàò
    // @ts-ignore - Í∞úÎ∞úÏö© Ï†ÑÏó≠ Ìï®Ïàò
    window.debugMyPageWatchHistory = async () => {
      try {
        const userId = await getCurrentUserId();
        if (!userId) {
          console.log('‚ùå Î°úÍ∑∏Ïù∏ÎêòÏßÄ ÏïäÏùå');
          return;
        }

        console.log('üì∫ === MyPage ÏãúÏ≤≠Í∏∞Î°ù ÎîîÎ≤ÑÍπÖ ===');
        
        // localStorage ÌôïÏù∏
        const exploreKey = `exploreWatchHistory_${userId}`;
        const exploreHistory = JSON.parse(localStorage.getItem(exploreKey) || '[]');
        console.log(`üì¶ localStorage ÌÉêÏÉâ ÏãúÏ≤≠Í∏∞Î°ù: ${exploreHistory.length}Í∞ú`);
        
        // DB ÌôïÏù∏
        const { getExploreWatchHistory } = await import('@/lib/database');
        const dbHistory = await getExploreWatchHistory(userId);
        console.log(`üóÑÔ∏è DB ÌÉêÏÉâ ÏãúÏ≤≠Í∏∞Î°ù: ${dbHistory?.length || 0}Í∞ú`);
        
        if (exploreHistory.length > 0) {
          console.log('ÏµúÍ∑º localStorage Í∏∞Î°ù:', exploreHistory.slice(0, 3));
        }
        if (dbHistory && dbHistory.length > 0) {
          console.log('ÏµúÍ∑º DB Í∏∞Î°ù:', dbHistory.slice(0, 3));
        }
        
      } catch (error) {
        console.error('‚ùå MyPage ÏãúÏ≤≠Í∏∞Î°ù ÎîîÎ≤ÑÍπÖ Ïã§Ìå®:', error);
      }
    };

    // üÜï ÏóÖÎ°úÎìú Ïä¨ÎùºÏù¥Îçî Î¨∏Ï†ú ÏûÑÏãú Ìï¥Í≤∞ Ïä§ÌÅ¨Î¶ΩÌä∏
    // @ts-ignore - Í∞úÎ∞úÏö© Ï†ÑÏó≠ Ìï®Ïàò
    window.fixUploadSliderIssue = async () => {
      try {
        console.log('üîß ÏóÖÎ°úÎìú Ïä¨ÎùºÏù¥Îçî Î¨∏Ï†ú Ìï¥Í≤∞ ÏãúÎèÑ...');
        
        const userId = await getCurrentUserId();
        if (!userId) {
          console.log('‚ùå Î°úÍ∑∏Ïù∏ÎêòÏßÄ ÏïäÏùå');
          return;
        }

        const { getSliderHistory, updateClusterImages } = await import('@/lib/database');
        
        // 1. SliderHistoryÏóêÏÑú ÏµúÏã† upload ÌÉÄÏûÖ Îç∞Ïù¥ÌÑ∞ Í∞ÄÏ†∏Ïò§Í∏∞
        const sliderHistory = await getSliderHistory(userId, 'upload');
        console.log('üéöÔ∏è SliderHistory Ï°∞Ìöå Í≤∞Í≥º:', sliderHistory?.length || 0);
        
        if (!sliderHistory || sliderHistory.length === 0) {
          console.log('‚ùå SliderHistoryÏóê upload ÌÉÄÏûÖ Îç∞Ïù¥ÌÑ∞Í∞Ä ÏóÜÏùå');
          return;
        }
        
        // Í∞ÄÏû• ÏµúÏã† ÌûàÏä§ÌÜ†Î¶¨ ÏÇ¨Ïö©
        const latestHistory = sliderHistory[0];
        console.log('üìã ÏµúÏã† ÌûàÏä§ÌÜ†Î¶¨ ÏÑ†ÌÉù:', {
          'id': latestHistory.id,
          'created_at': latestHistory.created_at,
          'images Í∞úÏàò': latestHistory.images?.length || 0,
          'version_type': latestHistory.version_type
        });
        
        if (!latestHistory.images || latestHistory.images.length === 0) {
          console.log('‚ùå ÏµúÏã† ÌûàÏä§ÌÜ†Î¶¨Ïóê Ïù¥ÎØ∏ÏßÄ Îç∞Ïù¥ÌÑ∞Í∞Ä ÏóÜÏùå');
          return;
        }
        
        // üÜï Îç∞Ïù¥ÌÑ∞ Íµ¨Ï°∞ ÏïàÏ†ÑÏÑ± Í≤ÄÏÇ¨ Î∞è Î≥ÄÌôò
        console.log('üîç ÏõêÎ≥∏ Îç∞Ïù¥ÌÑ∞ Íµ¨Ï°∞ ÌôïÏù∏:', {
          'Ï≤´ Î≤àÏß∏ Ïù¥ÎØ∏ÏßÄ': latestHistory.images[0],
          'position ÌïÑÎìú Ï°¥Ïû¨': !!latestHistory.images[0]?.position,
          'left ÌïÑÎìú Ï°¥Ïû¨': !!latestHistory.images[0]?.left,
          'top ÌïÑÎìú Ï°¥Ïû¨': !!latestHistory.images[0]?.top
        });
        
        // üÜï ÏïàÏ†ÑÌïú Îç∞Ïù¥ÌÑ∞ Î≥ÄÌôò
        const safeImages = latestHistory.images.map((img: any, index: number) => {
          // position ÌïÑÎìúÍ∞Ä ÏóÜÎäî Í≤ΩÏö∞ Í∏∞Î≥∏Í∞í ÏÉùÏÑ±
          let position = img.position;
          if (!position || typeof position.x === 'undefined' || typeof position.y === 'undefined') {
            // left, topÏóêÏÑú Ï∂îÏ∂ú ÏãúÎèÑ
            if (img.left && img.top) {
              position = {
                x: Number(img.left.replace('px', '')) || 0,
                y: Number(img.top.replace('px', '')) || 0
              };
            } else {
              // ÏôÑÏ†ÑÌûà ÏóÜÏúºÎ©¥ ÎûúÎç§ Ï§ëÏïô ÏúÑÏπò ÏÉùÏÑ±
              position = {
                x: 400 + (Math.random() - 0.5) * 200,
                y: 300 + (Math.random() - 0.5) * 200
              };
            }
            console.log(`üîß Ïù¥ÎØ∏ÏßÄ [${index}] position Î≥¥Ï†ï:`, position);
          }
          
          return {
            ...img,
            // ÌïÑÏàò ÌïÑÎìúÎì§ Î≥¥Ïû•
            id: img.id || `img_${index}_${Date.now()}`,
            user_id: img.user_id || userId,
            position: position,
            left: img.left || `${position.x}px`,
            top: img.top || `${position.y}px`,
            frameStyle: img.frameStyle || 'normal',
            sizeWeight: img.sizeWeight || 0.5,
            width: img.width || 300,
            height: img.height || 200,
            rotate: img.rotate || 0,
            created_at: img.created_at || new Date().toISOString()
          };
        });
        
        console.log('‚úÖ ÏïàÏ†ÑÌïú Îç∞Ïù¥ÌÑ∞ Î≥ÄÌôò ÏôÑÎ£å:', {
          'ÏõêÎ≥∏ Í∞úÏàò': latestHistory.images.length,
          'Î≥ÄÌôò ÌõÑ Í∞úÏàò': safeImages.length,
          'Î≥ÄÌôòÎêú ÏÉòÌîå': safeImages.slice(0, 2)
        });
        
        // 2. ÌûàÏä§ÌÜ†Î¶¨ Îç∞Ïù¥ÌÑ∞Î•º ÌòÑÏû¨ ÏÉÅÌÉú(ClusterImages)Î°ú Î≥µÏÇ¨
        console.log('üîÑ ÌûàÏä§ÌÜ†Î¶¨ Îç∞Ïù¥ÌÑ∞Î•º ÌòÑÏû¨ ÏÉÅÌÉúÎ°ú Î≥µÏÇ¨ Ï§ë...');
        const result = await updateClusterImages(userId, safeImages);
        console.log('‚úÖ ClusterImages ÏóÖÎç∞Ïù¥Ìä∏ ÏôÑÎ£å:', result?.length || 0);
        
        // 3. localStorageÎèÑ ÏóÖÎç∞Ïù¥Ìä∏
        const storageKey = `profileImages_${userId}`;
        localStorage.setItem(storageKey, JSON.stringify(safeImages));
        console.log('‚úÖ localStorage ÏóÖÎç∞Ïù¥Ìä∏ ÏôÑÎ£å');
        
        // 4. ÏÉàÎ°úÍ≥†Ïπ® Í∂åÏû•
        console.log('üîÑ ÌéòÏù¥ÏßÄÎ•º ÏÉàÎ°úÍ≥†Ïπ®ÌïòÏó¨ Î≥ÄÍ≤ΩÏÇ¨Ìï≠ÏùÑ ÌôïÏù∏ÌïòÏÑ∏Ïöî.');
        if (confirm('ÏóÖÎ°úÎìú Ïä¨ÎùºÏù¥Îçî Î¨∏Ï†ú Ìï¥Í≤∞ ÏôÑÎ£å!\nÌéòÏù¥ÏßÄÎ•º ÏÉàÎ°úÍ≥†Ïπ®ÌïòÏãúÍ≤†ÏäµÎãàÍπå?')) {
          window.location.reload();
        }
        
      } catch (error) {
        console.error('‚ùå ÏóÖÎ°úÎìú Ïä¨ÎùºÏù¥Îçî Î¨∏Ï†ú Ìï¥Í≤∞ Ïã§Ìå®:', error);
      }
    };

    // üÜï Videos Ï∫êÏãú Í¥ÄÎ¶¨ ÎèÑÍµ¨Îì§
    // @ts-ignore - Í∞úÎ∞úÏö© Ï†ÑÏó≠ Ìï®Ïàò
    window.checkVideosCache = async () => {
      try {
        console.log('üìπ === Videos Ï∫êÏãú ÏÉÅÌÉú ÌôïÏù∏ ===');
        
        const { getCacheStats } = await import('@/lib/database');
        const stats = await getCacheStats();
        
        console.log('üìä Ï∫êÏãú ÌÜµÍ≥Ñ:', {
          'Ï¥ù Ï∫êÏãúÎêú ÏòÅÏÉÅ': stats.total,
          'Ïú†Ìö®Ìïú Ï∫êÏãú': stats.recent,
          'ÎßåÎ£åÎêú Ï∫êÏãú': stats.expired,
          'Ïú†Ìö®Ïú®': `${stats.total > 0 ? ((stats.recent / stats.total) * 100).toFixed(1) : 0}%`
        });
        
        return stats;
      } catch (error) {
        console.error('‚ùå Videos Ï∫êÏãú ÏÉÅÌÉú ÌôïÏù∏ Ïã§Ìå®:', error);
      }
    };

    // @ts-ignore - Í∞úÎ∞úÏö© Ï†ÑÏó≠ Ìï®Ïàò
    window.cleanVideosCache = async (maxAgeInDays = 30) => {
      try {
        console.log(`üßπ ${maxAgeInDays}Ïùº Ïù¥ÏÉÅ Îêú Videos Ï∫êÏãú Ï†ïÎ¶¨ Ï§ë...`);
        
        const { cleanExpiredCache } = await import('@/lib/database');
        const deletedCount = await cleanExpiredCache(maxAgeInDays);
        
        console.log(`‚úÖ ${deletedCount}Í∞úÏùò ÎßåÎ£åÎêú Ï∫êÏãú ÏÇ≠Ï†ú ÏôÑÎ£å`);
        return deletedCount;
      } catch (error) {
        console.error('‚ùå Videos Ï∫êÏãú Ï†ïÎ¶¨ Ïã§Ìå®:', error);
      }
    };

    // @ts-ignore - Í∞úÎ∞úÏö© Ï†ÑÏó≠ Ìï®Ïàò
    window.prefetchRelatedVideos = async () => {
      try {
        console.log('üé¨ ÌòÑÏû¨ ÌîÑÎ°úÌïÑÏùò Í¥ÄÎ†® ÏòÅÏÉÅÎì§ ÏÇ¨Ï†Ñ Ï∫êÏã± ÏãúÏûë...');
        
        // ÌòÑÏû¨ Ïù¥ÎØ∏ÏßÄÎì§Ïùò Í¥ÄÎ†® ÏòÅÏÉÅ ID ÏàòÏßë
        const allVideoIds: string[] = [];
        images.forEach(img => {
          if (img.relatedVideos && Array.isArray(img.relatedVideos)) {
            img.relatedVideos.forEach((video: any) => {
              if (video.embedId) {
                allVideoIds.push(video.embedId);
              }
            });
          }
        });

        if (allVideoIds.length === 0) {
          console.log('‚ö†Ô∏è ÏÇ¨Ï†Ñ Ï∫êÏã±Ìï† Í¥ÄÎ†® ÏòÅÏÉÅÏù¥ ÏóÜÏäµÎãàÎã§');
          return;
        }

        const uniqueVideoIds = [...new Set(allVideoIds)];
        console.log(`üîç Ï¥ù ${uniqueVideoIds.length}Í∞úÏùò Í≥†Ïú† ÏòÅÏÉÅ ID Î∞úÍ≤¨`);

        const { prefetchVideos } = await import('@/lib/database');
        const result = await prefetchVideos(uniqueVideoIds);
        
        console.log('‚úÖ ÏÇ¨Ï†Ñ Ï∫êÏã± ÏôÑÎ£å:', {
          'ÏÑ±Í≥µ': result.success.length,
          'Ïã§Ìå®': result.failed.length,
          'Ï¥ù Ï≤òÎ¶¨': uniqueVideoIds.length
        });
        
        return result;
      } catch (error) {
        console.error('‚ùå Í¥ÄÎ†® ÏòÅÏÉÅ ÏÇ¨Ï†Ñ Ï∫êÏã± Ïã§Ìå®:', error);
      }
    };

    // @ts-ignore - Í∞úÎ∞úÏö© Ï†ÑÏó≠ Ìï®Ïàò
    window.testVideoCache = async (videoId = 'dQw4w9WgXcQ') => {
      try {
        console.log(`üß™ ÎπÑÎîîÏò§ Ï∫êÏãú ÌÖåÏä§Ìä∏ ÏãúÏûë: ${videoId}`);
        
        const { getCachedVideo, isCacheExpired } = await import('@/lib/database');
        
        // Ï∫êÏãú ÌôïÏù∏
        const cached = await getCachedVideo(videoId);
        if (cached) {
          const isExpired = isCacheExpired(cached.last_fetched_at);
          console.log('üìÑ Ï∫êÏãú ÏÉÅÌÉú:', {
            'Ï∫êÏãú Ï°¥Ïû¨': true,
            'Ï†úÎ™©': cached.title,
            'Ï∫êÏãú ÏùºÏãú': new Date(cached.last_fetched_at).toLocaleString(),
            'ÎßåÎ£å Ïó¨Î∂Ä': isExpired
          });
        } else {
          console.log('üìÑ Ï∫êÏãú ÏÉÅÌÉú: Ï∫êÏãú ÏóÜÏùå');
        }
        
        // fetchVideoInfoÎ°ú ÌÖåÏä§Ìä∏ (Ï∫êÏãú Î°úÏßÅ Ìè¨Ìï®)
        const { fetchVideoInfo } = await import('@/app/upload/VideoAnalysis/videoKeyword');
        const startTime = Date.now();
        const result = await fetchVideoInfo(videoId);
        const endTime = Date.now();
        
        console.log('‚è±Ô∏è ÏÑ±Îä• ÌÖåÏä§Ìä∏:', {
          'Ï≤òÎ¶¨ ÏãúÍ∞Ñ': `${endTime - startTime}ms`,
          'Í≤∞Í≥º': result ? 'ÏÑ±Í≥µ' : 'Ïã§Ìå®',
          'Ï†úÎ™©': result?.title
        });
        
        return result;
      } catch (error) {
        console.error('‚ùå ÎπÑÎîîÏò§ Ï∫êÏãú ÌÖåÏä§Ìä∏ Ïã§Ìå®:', error);
      }
    };
    
    console.log('üí° Í∞úÎ∞úÏö© Ìï®ÏàòÎì§Ïù¥ Îì±Î°ùÎêòÏóàÏäµÎãàÎã§:');
    console.log('   - window.clearAllTubeLensData() : Î™®Îì† Îç∞Ïù¥ÌÑ∞ Ï†ïÎ¶¨');
    console.log('   - window.checkDBStatus() : DB ÏÉÅÌÉú ÌôïÏù∏');
    console.log('   - window.debugSliderHistory(index) : Ïä¨ÎùºÏù¥Îçî ÌûàÏä§ÌÜ†Î¶¨ ÎîîÎ≤ÑÍπÖ');
    console.log('   - window.debugMyPageWatchHistory() : MyPage ÏãúÏ≤≠Í∏∞Î°ù ÎîîÎ≤ÑÍπÖ');
    console.log('   - window.fixUploadSliderIssue() : ÏóÖÎ°úÎìú Ïä¨ÎùºÏù¥Îçî Î¨∏Ï†ú Ìï¥Í≤∞');
    console.log('   üÜï Videos Ï∫êÏãú Í¥ÄÎ¶¨:');
    console.log('   - window.checkVideosCache() : Videos Ï∫êÏãú ÏÉÅÌÉú ÌôïÏù∏');
    console.log('   - window.cleanVideosCache(maxDays) : ÎßåÎ£åÎêú Ï∫êÏãú Ï†ïÎ¶¨');
    console.log('   - window.prefetchRelatedVideos() : Í¥ÄÎ†® ÏòÅÏÉÅ ÏÇ¨Ï†Ñ Ï∫êÏã±');
    console.log('   - window.testVideoCache(videoId) : Ï∫êÏãú ÏãúÏä§ÌÖú ÌÖåÏä§Ìä∏');
  }, []);

  //ÏÉàÎ°úÍ≥†Ïπ®Ïãú Î≥ÑÎ™Ö ÏÉùÏÑ±/Î°úÎìú ÌõÖ ÏÇ¨Ïö©
  useInitialProfileLoad({
    loadProfileFromStorage,
    isProfileExpired,
    generateProfile,
    setProfile,
  });

  // üÜï frameStyles ÏÉÅÌÉú ÎîîÎ≤ÑÍπÖ
  useEffect(() => {
    console.log('[MyProfile] frameStyles ÏÉÅÌÉú Î≥ÄÍ≤Ω:', frameStyles);
  }, [frameStyles]);

  // üÜï positions ÎèôÍ∏∞Ìôî ÏµúÏ†ÅÌôî - Ï§ëÎ≥µ ÏóÖÎç∞Ïù¥Ìä∏ Î∞©ÏßÄ
  useEffect(() => {
    if (images.length === 0) return; // Ïù¥ÎØ∏ÏßÄÍ∞Ä ÏóÜÏúºÎ©¥ Ïä§ÌÇµ
    
    setPositions(prevPositions => {
      const newPositions = { ...prevPositions };
      let hasChanges = false;
      const imageIdSet = new Set(images.map(img => img.id).filter(id => id)); // undefined Ï†úÍ±∞

      // images Î∞∞Ïó¥Ïóê ÏûàÎäî Í∞Å Ïù¥ÎØ∏ÏßÄÏóê ÎåÄÌï¥
      images.forEach(image => {
        // idÍ∞Ä ÏóÜÏúºÎ©¥ Í±¥ÎÑàÎõ∞Í∏∞
        if (!image.id) return;
        
        // positionsÏóê Ìï¥Îãπ Ïù¥ÎØ∏ÏßÄÍ∞Ä ÏóÜÏúºÎ©¥ Ï¥àÍ∏∞ ÏúÑÏπò ÏÑ§Ï†ï
        if (!newPositions[image.id]) {
          newPositions[image.id] = {
            x: Number(image.left?.replace('px', '') || 0),
            y: Number(image.top?.replace('px', '') || 0),
          };
          hasChanges = true;
        }
      });

      // positionsÏóê ÏûàÏßÄÎßå ÌòÑÏû¨ images Î∞∞Ïó¥ÏóêÎäî ÏóÜÎäî Ïù¥ÎØ∏ÏßÄ Ï†ïÎ≥¥ ÏÇ≠Ï†ú
      for (const id in newPositions) {
        if (!imageIdSet.has(id)) {
          delete newPositions[id];
          hasChanges = true;
        }
      }
      
      // Î≥ÄÍ≤ΩÏÇ¨Ìï≠Ïù¥ ÏûàÏùÑ ÎïåÎßå ÏÉà Í∞ùÏ≤¥ Î∞òÌôò
      return hasChanges ? newPositions : prevPositions;
    });
  }, [images]); // imagesÍ∞Ä Î≥ÄÍ≤ΩÎê† ÎïåÎßå Ïã§Ìñâ

  return (
    <main className={`fixed inset-0 overflow-y-auto transition-colors duration-500 ${bgColor}`}>
      {/* ÏÉùÏÑ± Ï§ë Îã§Ïù¥ÏñºÎ°úÍ∑∏ -> GeneratingDialog.tsx 
      <GeneratingDialog
        open={showGeneratingDialog}
        onOpenChange={setShowGeneratingDialog}
        generatingStep={generatingStep}
      />
      */}

      {/* Í≤ÄÏÉâ Î™®Îìú UI -> SearchModeUI.tsx */}
      <SearchModeUI
        isSearchMode={isSearchMode}
        selectedImage={selectedImage}
        selectedImages={selectedImages}
        handleSearch={handleSearch}
        toggleSearchMode={toggleSearchMode}
        setIsSearchMode={setIsSearchMode}
      />

      {/* My_profile ÌéòÏù¥ÏßÄ Î†àÏù¥ÏïÑÏõÉ */}
      <div className="relative z-20 w-full">
        <div className="max-w-[1200px] mx-auto ">

          {/* ÎãâÎÑ¥/ÏÑ§Î™Ö/Î≤ÑÌäº Ìó§Îçî Î∂ÑÎ¶¨ -> ProfileHeader.tsx */}
          {!isSearchMode && (
            <ProfileHeader
              profile={profile}
              isEditing={isEditing}
              isGeneratingProfile={showGeneratingDialog}
              onEditClick={() => setIsEditing(true)}
              onSaveClick={handleSave}
              onGenerateProfile={generateProfile}
            />
          )}

          {/* DraggableImage Ïª¥Ìè¨ÎÑåÌä∏ Î†åÎçîÎßÅ -> DraggableImage.tsx */}
          <div className="relative w-[1000px] h-[680px] mx-auto mt-8">
            <DndContext onDragEnd={handleDragEnd} modifiers={[restrictToContainer]}>
              {images.map((image) => {
                // üÜï DBÏóêÏÑú Î°úÎìúÌïú frameStyleÏùÑ Ïö∞ÏÑ†Ï†ÅÏúºÎ°ú ÏÇ¨Ïö©
                const currentFrameStyle = image.desired_self 
                  ? 'cokie' 
                  : (image.frameStyle || frameStyles[image.id] || 'normal');
                
                console.log(`[MyProfile] Ïù¥ÎØ∏ÏßÄ ${image.id} frameStyle Ï†ÑÎã¨:`, {
                  'image.frameStyle': image.frameStyle,
                  'frameStyles[image.id]': frameStyles[image.id],
                  'currentFrameStyle': currentFrameStyle
                });
                
                return (
                <div
                  key={image.id || Math.random().toString()}
                  className={`transition-all duration-500 ${
                    isEditing || (image.id && visibleImageIds.has(image.id))
                      ? 'opacity-100 scale-100'
                      : 'opacity-0 scale-95 pointer-events-none'
                  }`}
                >
                  <DraggableImage
                    image={image}
                    position={positions[image.id] || image.position}
                    isEditing={isEditing && !isSearchMode}
                    frameStyle={currentFrameStyle}
                    onFrameStyleChange={handleFrameStyleChange}
                    onImageChange={handleImageChange}
                    onImageSelect={handleImageSelect}
                    isSelected={selectedImages.some(img => img.id === image.id)}
                    isSearchMode={isSearchMode}
                    onImageDelete={handleImageDelete}
                    isTransitioning={sliderIsTransitioning}
                  />
                </div>
                )
              })}
            </DndContext>
          </div>

          {/* ÌîåÎ°úÌåÖ Í≤ÄÏÉâ Î≤ÑÌäº Î∂ÑÎ¶¨ */}
          {!isEditing && !isSearchMode &&(
            <SearchFloatingButton
            isSearchMode={isSearchMode}
            toggleSearchMode={toggleSearchMode}
          />
          )}
          

          {/* ÌûàÏä§ÌÜ†Î¶¨ Ïä¨ÎùºÏù¥Îçî (Í≤ÄÏÉâ Î™®ÎìúÍ∞Ä ÏïÑÎãê ÎïåÎßå ÌëúÏãú)->HistorySlider.tsx */}
          {!isEditing && !isSearchMode && (
            <HistorySlider
              histories={sliderHistories}
              currentHistoryIndex={sliderCurrentHistoryIndex}
              isPlaying={sliderIsPlaying}
              handlePlayHistory={handlePlayHistory}
              handleHistoryClick={handleHistoryClick}
              handleProfileImagesClick={async () => {
                // üÜï ÌååÎûÄ Ï†ê ÌÅ¥Î¶≠ Ïãú DBÏóêÏÑú ÏµúÏã† ÏÉÅÌÉú Î°úÎìú
                console.log('üîµ ÌòÑÏû¨ Íæ∏ÎØº ÏÉÅÌÉúÎ°ú ÎèåÏïÑÍ∞ÄÍ∏∞ - DBÏóêÏÑú ÏµúÏã† Îç∞Ïù¥ÌÑ∞ Î°úÎìú');
                try {
                  await reloadFromDB();
                  console.log('‚úÖ DBÏóêÏÑú ÏµúÏã† ÏÉÅÌÉú Î°úÎìú ÏôÑÎ£å');
                } catch (error) {
                  console.error('‚ùå DB Î°úÎìú Ïã§Ìå®:', error);
                  // Ïã§Ìå® Ïãú ÏÉàÎ°úÍ≥†Ïπ®ÏúºÎ°ú fallback
                  window.location.reload();
                }
              }}
              isTransitioning={sliderIsTransitioning}
            />
          )}
        </div>
      </div>

      {/* Ïª¨Îü¨ ÌåîÎ†àÌä∏ Î≥¥Îìú (Ìé∏Ïßë Î™®ÎìúÏùº ÎïåÎßå ÌëúÏãú)->ColorPaletteBoard.tsx */}
      {isEditing && !isSearchMode && (
        <ColorPaletteBoard
          colorOptions={colorOptions}
          bgColor={bgColor}
          onChange={handleBgColorChange}
        />
      )}

      {/* ÌïòÎã® Ïï°ÏÖò Î≤ÑÌäºÎì§ - Í≤ÄÏÉâ Î™®ÎìúÍ∞Ä ÏïÑÎãê ÎïåÎßå ÌëúÏãú */}
      {!isSearchMode && (
      <BottomActionBar
        isEditing={isEditing}
          isGeneratingProfile={showGeneratingDialog}
        onEditClick={() => setIsEditing(true)}
        onSaveClick={handleSave}
          onGenerateProfile={generateProfile}
          sliderCurrentHistoryIndex={sliderCurrentHistoryIndex}
      />
      )}

    </main>
  );
} 